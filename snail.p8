pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
function _init()
  world = {}
  for i=1,10 do
    local o = salt:new()
    o.x = i*20
    o.y = 64
    add(world, o)
  end
  
  for i=1,10 do
    local o = snail:new()
    add(world, o)
  end
end

function _update()
  local i = 1
  while i <= #world do
    local v = world[i]
    if v:update() == false then
      del(world, v)
    else
      i = i + 1
    end
  end
  pl:update()
  cam:update()
end

function _draw()
  road:draw()
  pl:draw()
  for i=1,#world do
    world[i]:draw()
  end
end
-->8
-- camera

cam = {x=0,y=0,w=64,h=64}
cam.ox, cam.oy = 0, 0

function cam.update()
  if cam.x+cam.w/2<pl.x then
    cam.x=pl.x - cam.w/2
  elseif cam.x-cam.w/2>pl.x then
    cam.x = pl.x + cam.w/2
  end
    
  if cam.y+cam.h/2<pl.y then
    cam.y=pl.y - cam.h/2
  elseif cam.y-cam.h/2>pl.y then
    cam.y = pl.y + cam.h/2
  end
  
  cam.ox = 64 - cam.x
  --cam.oy = 64 - cam.y
end
-->8
obj = {}

function obj:new()
  local self = setmetatable({}, {__index=self})
  self.x = 0
  self.y = 0
  self.w = 8
  self.h = 8
  self.sprite = 0
  return self
end

function obj:update()
  if self:iscolliding(pl) then
    return false
  end
  return true
end

function obj:iscolliding(o)
  return self.x < o.x + o.w
     and self.x + self.w > o.x
     and self.y < o.y + o.h
     and self.y + self.h > o.y
end

function obj:draw()
  spr(self.sprite,self.x+cam.ox,self.y+cam.oy)
end
-->8
-- road

road = {}

function road.update()
end

function road.draw()
  local ox, oy = cam.ox%16, cam.oy%16
  for y=-1,8-1 do
    for x=-1,8-1 do
      spr(1,x*16+ox,y*16+oy,2,2)
    end
  end
end
-->8
-- salt

salt = obj:new()
function salt:new()
  local self = obj.new(self)
  self.sprite = 3
  return self
end
-->8
-- player

pl = obj:new()
pl.speed = 2
pl.sprite = 0

function pl:update()
  local dx,dy = 0,0
  if btn(0) then
    dx = dx - 1
  end
  if btn(1) then
    dx = dx + 1
  end
  if btn(2) then
    dy = dy - 1
  end
  if btn(3) then
    dy = dy + 1
  end
  self.x = self.x + dx*self.speed
  self.y = self.y + dy*self.speed
  
  self.y = min(self.y, 128 - 8)
  self.y = max(self.y, 0)
end
-->8
-- snail
snail = obj:new()
function snail:new()
  local self = obj.new(self)
    self.x = cam.x + 64
    self.y = (flr(rnd(7))+1)*16
    self.speed = flr(rnd(3))+1
  return self
end

function snail:draw()
  circfill(self.x+cam.ox,self.y+cam.oy,4,50)
end

function snail:update()
  self.x = self.x - self.speed
  if self.x + cam.ox + 8 < 0
    or self.x + cam.ox > 128
  then
    add(world, snail:new())
    return false
  end
end
__gfx__
00000000333333333333333300060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000333333333333333300606600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700333333333333333300660600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000333333333333333306060606000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000333333333333333306606600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700333333b33333333300666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000333333b33333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000333333b33b33333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000333bb3b3b333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000003333b3b3b333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000003333b3bbb333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000003333bbbb3333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000003333bbbbb333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000333333333333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000333333333333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000333333333333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000040504050405040504050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000141501151415141514150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000504050405040504050405020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000141514151415141514151415120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0405000004050405040504050405000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1415141514151415141514151415000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
